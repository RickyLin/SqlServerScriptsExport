using System;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace SqlServerScriptsExport
{
    public static class FileHelper
    {
        private static readonly char[] InvalidFileNameChars = Path.GetInvalidFileNameChars();
        
        public static string SanitizeFileName(string fileName)
        {
            if (string.IsNullOrWhiteSpace(fileName))
                return "UnnamedObject";

            // Replace invalid characters with underscores
            foreach (char invalidChar in InvalidFileNameChars)
            {
                fileName = fileName.Replace(invalidChar, '_');
            }

            // Remove any remaining problematic characters
            fileName = Regex.Replace(fileName, @"[<>:""/\\|?*]", "_");
            
            // Trim dots and spaces from the end
            fileName = fileName.TrimEnd('.', ' ');
            
            // Ensure it's not empty after sanitization
            if (string.IsNullOrWhiteSpace(fileName))
                return "UnnamedObject";
            
            return fileName;
        }

        public static async Task WriteScriptFileAsync(string filePath, string content, string objectName, string objectType, string sourceDatabase, bool includeHeader, Logger logger)
        {
            try
            {
                // Ensure directory exists
                var directory = Path.GetDirectoryName(filePath);
                if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                // Generate script header if requested
                var fullContent = content;
                if (includeHeader)
                {
                    var header = GenerateScriptHeader(objectName, objectType, sourceDatabase);
                    fullContent = header + Environment.NewLine + content;
                }

                // Write to temporary file first, then rename for atomic operation
                var tempFilePath = filePath + ".tmp";
                await File.WriteAllTextAsync(tempFilePath, fullContent, Encoding.UTF8);
                
                // Atomic move
                if (File.Exists(filePath))
                {
                    File.Delete(filePath);
                }
                File.Move(tempFilePath, filePath);

                logger.LogDebug($"Created script file: {filePath}");
            }
            catch (Exception ex)
            {
                throw new InvalidOperationException($"Failed to write script file '{filePath}': {ex.Message}", ex);
            }
        }

        private static string GenerateScriptHeader(string objectName, string objectType, string sourceDatabase)
        {
            var separator = new string('-', 78);
            return $@"{separator}
-- SQL Server Script Export
-- Object Name: {objectName}
-- Object Type: {objectType}
-- Source Database: {sourceDatabase}
-- Generated: {DateTime.UtcNow:yyyy-MM-dd HH:mm:ss} UTC
-- 
-- This script was automatically generated by SqlServerScriptsExport
{separator}";
        }

        public static string GetOutputPathForObjectType(string baseOutputPath, DatabaseObjectType objectType, string? parentTable = null)
        {
            return objectType switch
            {
                DatabaseObjectType.View => Path.Combine(baseOutputPath, "Views"),
                DatabaseObjectType.StoredProcedure => Path.Combine(baseOutputPath, "StoredProcedures"),
                DatabaseObjectType.ScalarFunction => Path.Combine(baseOutputPath, "Functions_ScalarValued"),
                DatabaseObjectType.TableValuedFunction => Path.Combine(baseOutputPath, "Functions_TableValued"),
                DatabaseObjectType.Trigger when !string.IsNullOrEmpty(parentTable) => 
                    Path.Combine(baseOutputPath, SanitizeFileName(parentTable), "Triggers"),
                DatabaseObjectType.Trigger => Path.Combine(baseOutputPath, "UnknownTable", "Triggers"),
                _ => baseOutputPath
            };
        }
    }
}
